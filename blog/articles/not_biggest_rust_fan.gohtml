<p>
  Last fall, I started looking for a new programming language to learn. Mostly for fun,
  but also in hopes of learning something I could use for work.
  My criteria were pretty straightforward, something...
</p>
<ul>
  <li>Compiled</li>
  <li>General purpose</li>
  <li>With decent adoption (stability = Good!)</li>
  <li>And a batteries included standard library,
    preferably networking built for this day and age
  </li>
</ul>
and it would be great if it...
<ul>
  <li>Was not an absolute headache to read and write</li>
  <li>Had a Modern packaging system</li>
</ul>
<p>
  At this point, I've used C/C++, and of course that's fun. But my previous experience
  was using it in
  <a href="https://en.wikipedia.org/wiki/High-performance_computing">High Performance
    Computing (HPC)</a> not cloud computing, and I honestly
  wasn't excited about the idea of making RESTful API calls with C. Plus!
  It's not exactly modern, and I wanted to learn something new!
</p>
<p>
  It was at this point that I realized that there are more languages out there
  than you can shake a stick at (as my grandad used to say). Holy cow, we've
  got...
</p>
<ul>
  <li>Zig</li>
  <li>Nim</li>
  <li>Swift</li>
  <li>Vala</li>
  <li>V</li>
  <li>Elixir</li>
</ul>
<p>And of course, every variation of C</p>
<ul>
  <li>C</li>
  <li>C++</li>
  <li>C#</li>
  <li>Objective C</li>
  <li>Subjective C<sup><a href="#ref-sub-c">1</a></sup></li>
</ul>
<p>
  And that doesn't even scratch the surface.
  But the two that always seem to come up (usually in comparison) are
  <a href="https://www.rust-lang.org/">Rust</a> and <a
    href="https://go.dev/">Go</a>.
</p>
<p>
  Lets get this out of the way, I don't understand why these two languages
  are always compared. I guess there's a rivalry between the two? The crossover in
  ideal-usage seems, relatively,
  minimal to me. Go's relatively large runtime precludes it from being
  a true systems programming language, and Rust's syntax prevents it from
  being useful... for anything.
</p>
<p>
  I'm Just kidding!
</p>
<p>Anyways, as I started my journey into Rust, I did what I've done in the past with
  other languages, pick up a book or two, check out the online tutorials.
  However, unlike other languages, for the first time I found a wealth of culture that
  accompanied the language. We're talkin' Rust Conf, a very active <a
    href="https://www.reddit.com/r/rust/">subreddit</a>, <a
    href="https://discord.gg/rust">discord</a>, <a
    href="https://rustacean-station.org/">podcasts</a>,
  the <a href="https://github.com/rust-lang/rustlings">Rustling</a>...thing, you name
  it. All amazing resources!
</p>
<div class="row">
  <div class="col">
    <p>
      Here's the thing though; the thing I found that seems underpins all these amazing
      resources, is this fervent evangelism to convert the programming world.
      Why do Rustaceans believe everything needs to be written in Rust? I understand
      they're
      excited about a new language (and we're still in the phase of inflated
      expectations in
      <a
        href="https://en.wikipedia.org/wiki/Gartner_hype_cycle">Gartner's hype
        cycle
      </a>) but that doesn't mean it's the one language to rule them all.
    </p>
  </div>
  <div class="col">
    <div style="width:100%;height:0;padding-bottom:44%;position:relative;">
      <iframe src="https://giphy.com/embed/ie8I61aEWnJCM" width="100%" height="100%"
              style="position:absolute" class="giphy-embed"
              allowFullScreen></iframe>
    </div>
    <p><a
        href="https://giphy.com/gifs/the-lord-of-rings-return-king-gollum-ie8I61aEWnJCM">via
        GIPHY</a></p>
  </div>
</div>
<p>
  I'll provide an example, I was listening to <a
    href="https://rustacean-station.org/episode/043-bastian-gruber/">this
    Rustacean-Station podcast on Rust backend web development</a> At this point (May
  2022), Rust has, by no means, seen serious backend adoption, and for good reason.
  There's no battle-hardened backend framework(s), and it doesn't seem to have the
  out-of-the-box http features like <a href="https://pkg.go.dev/net/http">Go</a>.
  But still, the podcast host/guest had an attitude of <i>unless it's legacy code, you
    should consider proposing writing your services in Rust to you boss</i> (I'm
  paraphrasing, but if you want
  to see what I mean, they talk about it in the last few minutes).
</p>
<p>Come on, Really?!</p>
<p>
  If you look at this site's git repo, (and the title of the article might also
  provide a hint) you'll see it's written in Go, not Rust.
  However, trying Rust first gave me the perspective to appreciate Go
  when I stumbled upon a copy of <a
    href="https://www.amazon.com/Programming-Language-Addison-Wesley-Professional-Computing/dp/0134190440">
    Donnovan and Kernighan's <i>The Go Programming Language </i></a>
  in <a href="https://www.hpb.com">Half Price Books</a> in Dallas (if you live
  in the area, I highly recommend)
</p>
<p>
  Before I dump on the language anymore,
  let me go through a few things I really like about Rust.
</p>
<div>
  <ul>
    <li>
      <a href="https://doc.rust-lang.org/cargo/">
        Cargo
      </a>
      <ul>
        <li>
          Ya gotta love the ease that Rust's package manager provides. In combo
          with <a href="https://crates.io/"> Crates.io's </a>centralization of
          free and open-source Rust packages. it's a versatile tool, that easy
          to use.
        </li>
        <li>
          That being said, if you don't use Cargo, you don't use Rust. There's no real
          alternative (for now).
          Counterpoint, I think I would prefer to use Cargo over Go's outdated packaging
          mentality.
        </li>
      </ul>
    </li>
    <li>
      Performance
      <ul>
        <li>There's no denying those benchmarks look enticing</li>
        <li>but also, who cares? 99.9% of the time, I don't need the performance
          of Rust/C. The 0.1% comes from a background in HPC, and Go comes close enough,
          but I'm no longer in that field.
        </li>
      </ul>
    </li>
    <li>
      Community and Documentation
      <ul>
        <li>
          <a href="https://doc.rust-lang.org/book/"> The Rust Book </a>and the
          community are a very real assets to those using the language. The community is
          open to newcomers, and the level documentation is substantial.
        </li>
        <li>
          But again, jeez you have to put up with the proselytizer. It's like the
          language is a <a href="https://www.dictionary.com/browse/jabroni">jabroni</a>
          magnet!
        </li>
      </ul>
    </li>
  </ul>
</div>
<p>
  So yeah, Rust has some great tools that
  go along with the language and, if written well, can produce tiny binaries
  with great performance. Here's why it's almost never my go-to language...
</p>
<div>
  <ul>
    <li>
      Syntax
      <ul>
        <li>As I write this I feel silly, but I cannot stand the Rust syntax.
          For me, the concepts of <a
            href="https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html">
            ownership and borrowing
          </a>
          were not that hard to pick up; it's the ugly, unreadable syntax
          that, for some reason, just wouldn't stick in my brain long enough to become
          useful until I hammered it in for months on end.
          <ul>
            <li>As an example, I submit to you
              <a
                href="https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-annotation-syntax">
                Lifetime Annotations
              </a>
            </li>
          </ul>
        </li>
        <li>
          Back to comparing (sorry, can't help myself), I've found Go's syntax
          to be a joy to read and write. By extension, that language is easy to
          pick up, and you can go from novice to productive in a couple of
          weeks (as opposed to Rust which can take months for a competent programmer
          with previous experience). Why? because, similar to python, it's close to
          human language.
          It's like english, but less nonsensical.
          <ul>
            <li>
              for example, I can always tell that <code>Println </code>in
              <code>fmt.Println("Hello there")</code> is coming from the
              <code>fmt</code> package, in the same line. No scrolling to the
              top to sift through import statements to see where that function
              is declared. That just makes sense (to me at least)!
            </li>
          </ul>
        </li>
      </ul>
    </li>
    <li>
      compile time
      <ul>
        <li>
          <div class="row">
            <div class="col">
              <div style="width:100%;height:0;padding-bottom:42%;position:relative;">
                <iframe src="https://giphy.com/embed/GU76aTcr5IkYo" width="100%"
                        height="100%" style="position:absolute"
                        class="giphy-embed" allowFullScreen></iframe>
              </div>
              <p><a href="https://giphy.com/gifs/moana-hei-GU76aTcr5IkYo">via GIPHY</a>
              </p>
            </div>
            <div class="col">
              What the stuff? Even Rust's Hello World program feels like I'm
              compiling
              a flippen kernel (I have heard the Rust team is working on this, and it's
              getting better)! Like, bring a book to work with you
              otherwise, you're going to be sitting their half the time
              twiddling your thumbs, waiting for that tiny program to compile
            </div>
          </div>
        </li>
        <li>
          Again, sorry for comparing, but Go's compile time is so fast, for smaller
          programs like this website, if you blink
          you'll miss it. When it comes time to build,
          I can basically treat Go like an interpreted language. just 'go run'
          and BOOM! I'm back to work. No time wasted
          thinking out the <sup><b><a href="#deep-thought">2</a></b></sup>deeper
          things in life.
        </li>
      </ul>
    <li>
      The sales pitch
      <ul>
        <li>
          Coming full circle, the (zealous) Rust community has tendency to pitch Rust as
          a panacea. "<i>Just rewrite it in Rust</i>"<a
            href="#ref2"><sup><b>2</b></sup></a>
          seems to be the Rust moto. It's become a selling point,
          that's been conflated with quality.
          <ul>
            <li>As an example from recent memory, The <a
                href="https://www.warp.dev/"> Warp Terminal Emulator</a>.
              At the time of writing, the immediate description of the program
              is
              <span>"
                <i>Warp is a blazingly fast,</i>
                <b class="text-danger">rust-based</b>
                <i>terminal reimagined from
                the ground up to work like a modern app.</i>"
              </span>
            </li>
            <li>
              Just because something is written in rust does not mean it
              high-quality! As of writing, Warp has trouble with basic
              tab-completion. I've also seen more than a couple packages on the
              <a href="https://aur.archlinux.org/">AUR</a> written in Rust that
              were
              memory safe, sure, but needed to be manually killed because they
              were stuck in a loop and running CPU usage through the roof.
            </li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</div>

<div>
  <p>
    Alright, back to reality. I know I just wrote a whole article bagging on the
    language, but Rust is not the worst. While I think it has problems,
    and is on track to become the new C++ (over featured), and it bugs me how Rust
    pitches itself as a cure all, it does have some very notably qualities.
    I actually hope to give it another shot someday<sup><a href="#ref3">3</a></sup>,
    probably after I feel I've mastered Go.
    if someone came to me and in needing something written in Rust, and it seemed like
    the appropriate language, I'd be ecstatic about giving Rust another shot.
  </p>
</div>
<br>
<p class="text-muted font-monospace" id="ref-sub-c">
  <small>
    <sup>1</sup>
    hehe, I wish this joke language existed!
  </small>
</p>
<p class="mt-5 text-muted font-monospace" id="deep-thought">
  <small>
    <sup>2</sup>
    Like, why do hot dogs come in packages of 8, but buns come in
    packages of 10?
  </small>
</p>
<p class="text-muted font-monospace" id="ref2">
  <small>
    <sup>2</sup>
    See <a
      href="https://www.reddit.com/r/rust/comments/biq864/giving_up_on_wlrootsrs/">the
      article discussed</a> in the Rust Sub-Reddit as an example.
  </small>
</p>
<p class="text-muted font-monospace" id="ref3">
  <small>
    <sup>3</sup>
    I remember when someone first introduced me to Python, and I thought, "Nah!
    who needs that low performance junk!?" Now I use it every day, and of
    course, love it.
  </small>
</p>
