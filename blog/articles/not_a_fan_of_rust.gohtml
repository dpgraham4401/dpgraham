<p>
  Last fall, I started looking for a new language to learn.
  My criteria were pretty straightforward, something...
</p>
<ul>
  <li>compiled</li>
  <li>General purpose</li>
  <li>With decent adoption</li>
  <li>And a batteries included standard library,
    preferably networking built for the 2020's
  </li>
</ul>
and it would be great if it...
<ul>
  <li>Was not an absolute headache to read and write</li>
  <li>Had a Modern packaging system</li>
</ul>
<p>
  At this point, I've used C/C++, and of course that's fun. But I honestly was
  not excited about the idea of making RESTful API calls with it. Plus!
  It's not exactly modern, and I wanted to learn something new!
</p>
<p>
  It was at this point I realized that there are more languages out there
  than you can shake a stick at (as my grandad used to say). Holy cow, we've
  got...
</p>
<ul>
  <li>Zig</li>
  <li>Nim</li>
  <li>Swift</li>
  <li>Vala</li>
  <li>V</li>
  <li>Elixir</li>
</ul>
<ul>
  <li>And of course, every variation of C</li>
  <li>C</li>
  <li>C++</li>
  <li>C#</li>
  <li>objective C</li>
</ul>
<p>
  And that doesn't even scratch the surface.
  But the two that always seem to come up (usually in comparison) are
  <a href="https://www.rust-lang.org/">Rust</a> and <a
    href="https://go.dev/">Go</a>.
</p>
<div class="row">
  <div class="col">
    <p>
      Lets get this out of the way, I don't understand why these two languages
      are always compared. The crossover in ideal-usage seems, relatively,
      minimal to me. Go's relatively large runtime precludes it from being
      a true systems programming language, and Rust's syntax prevents it from
      being useful... for anything.
    </p>
    <p>
      Just kidding! They're both great tools.
    </p>
    <p>
      but I guess there's a rivalry of some kind between the two? Or maybe the
      Rustaceans are just excited, and we're still in the phase of inflated
      expectations in
      <a
        href="https://en.wikipedia.org/wiki/Gartner_hype_cycle">Gartner's hype
        cycle
      </a>.
    </p>
  </div>
  <div class="col">
    <iframe src="https://giphy.com/embed/qTsLIyLFEKKHK" width="480"
            height="273"
            class="giphy-embed rounded mx-auto" allowFullScreen></iframe>
  </div>
</div>
<p>
  If you look at this site's git repo, (and the title of the article might also
  provide a hint)
  you'll see it's written in Go, which may
  provide a hint about where I landed between the two (it's not really that
  black and white, but hey),
  But trying Rust first, gave me the perspective to appreciate Go
  when I stumbled upon a copy of <a
    href="https://www.amazon.com/Programming-Language-Addison-Wesley-Professional-Computing/dp/0134190440">
    Donnovan and Kernighan's <i>The Go Programming Language </i></a>
  in <a href="https://www.hpb.com">Half Price Books</a> in Dallas (if you live
  in the area, I highly recommend)
</p>
<p>
  Before addressing the things that kept me from becoming a Rustacean initially,
  lets go through a few high level things I really like about Rust.
</p>
<div>
  <ul>
    <li>
      <a href="https://doc.rust-lang.org/cargo/">
        Cargo
      </a>
      <ul>
        <li>
          Ya gotta love the ease that Rust's package manager provides. In combo
          with <a href="https://crates.io/"> Crates.io's </a>centralization of
          free and open-source Rust packages. it's a versatile tool, that easy
          to use.
        </li>
        <li>
          However, if you don't use Cargo, you don't use Rust (practically
          speaking). There's no (real) alternative, and Cargo seem so baked in
          I wonder if another tool could possibly gain enough momentum to get
          community support, kinda like how <a
            href="https://yarnpkg.com/">Yarn</a>
          was released as an alternative to <a
            href="https://www.npmjs.com/">NPM</a>
          (except that had the backing of a few large companies
          who could put their weight behind it).
        </li>
      </ul>
    </li>
    <li>
      Performance
      <ul>
        <li>no denying those benchmarks look enticing</li>
        <li>but also, who cares? 99.9% of things I don't need the performance
          of Rust/C. The 0.1% comes from a background in Geophysics,
          but everything in that realm uses legacy code. I would state that
          memory safety is not a security concern, not in the same sense
          as people dealing with financial records.
        </li>
      </ul>
    </li>
    <li>
      Community and Documentation
      <ul>
        <li>
          Rust really takes the cake on this one,
          <a href="https://doc.rust-lang.org/book/"> The Rust Book </a>(free)
          and the
          very welcoming community is a very real assets to those using the
          language.
        </li>
        <li>
          Go's doesn't really compare, not always is a bad way. IMO, the Go
          community carryovers the roll-you-own attitude of C. There's
          an understanding that incorporating a third-party dependency
          should be taken with caution. Sometimes Rust's community feels like
          you're joining a cult, a very aggressive online cult that can't take
          criticism.
        </li>
      </ul>
    </li>
  </ul>
</div>
<p>
  Just from that short list you can see Rust has some great tools that
  go along with the language, and if written well, can produce tiny binaries
  with great performance. here's why it's almost never my go-to language...
</p>
<div>
  <ul>
    <li>
      Syntax
      <ul>
        <li>As I write this I feel silly, but I cannot stand the Rust syntax.
          For me, the concepts of <a
            href="https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html">
            ownership and borrowing
          </a>
          were not that hard to pick up, it's the ugly, unreadable syntax
          that, for some reason, just wouldn't stick in my brain and become
          useful until I hammered it in for months on end.
          <ul>
            <li>As an example, I submit to you
              <a
                href="https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-annotation-syntax">
                Lifetime Annotations
              </a>
            </li>
          </ul>
        </li>
        <li>
          Back to comparing (sorry, can't help myself), I've found Go's syntax
          to be a joy to read and write. By extension, that language is easy to
          pick up, and you can go from novice to productive in a couple of
          weeks. Why? because, similar to python, it's close to human language.
          It's like english, but more explicit.
          <ul>
            <li>
              for example, I can always tell that <code>Println </code>in
              <code>fmt.Println("Hello there")</code> is coming from the
              <code>fmt</code> package, in the same line. No scrolling to the
              top to sift through import statements to see where that function
              is declared. That just makes sense to me!
            </li>
          </ul>
        </li>
      </ul>
    </li>
    <li>
      compile time
      <ul>
        <li>
          <div class="row">
            <div class="col">
              What the stuff? Even Rust's Hello World program feels like I'm
              compiling
              a flippen kernel! Like, bring a book to work with you
              otherwise, you're going to be sitting their half the time
              twiddling your thumbs, waiting for that tiny program to compile
            </div>
            <div class="col">
              <iframe src="https://giphy.com/embed/GU76aTcr5IkYo" width="480"
                      height="201" class="giphy-embed rounded"
                      allowFullScreen></iframe>
              <p><a href="https://giphy.com/gifs/moana-hei-GU76aTcr5IkYo">via
                  GIPHY</a></p>

            </div>
          </div>
        </li>
        <li>
          Back on Earth, Go's compile time is so fast, feels like if you blink,
          you'll miss it. When it comes time to build,
          I can basically treat Go like an interpreted language. just 'go run'
          and BOOM! I'm back to work. No time wasted
          thinking out the <sup><b><a href="#deep-thought">1</a></b></sup>deeper
          things in life.
        </li>
      </ul>
    <li>
      The sales pitch
      <ul>
        <li>
          This is more of a marketing complaint, the (zealous) Rust community
          has tendency to pitch Rust as a panacea.
          "<i>Just rewrite it in Rust</i>"<a
            href="#ref2"><sup><b>2</b></sup></a>
          seems to be the Rust moto. It's become a selling point,
          that's been conflated with quality.
          <ul>
            <li>As an example from recent memory, The <a
                href="https://www.warp.dev/"> Warp Terminal Emulator</a>.
              At the time of writing, the immediate description of the program
              is
              <span>"
                <i>Warp is a blazingly fast,</i>
                <b class="text-danger">rust-based</b>
                <i>terminal reimagined from
                the ground up to work like a modern app.</i>"
              </span>
            </li>
            <li>
              Just because something is written in rust does not mean it
              high-quality! As of writing, Warp has trouble with basic
              tab-completion. I've seen more than a couple packages on the
              <a href="https://aur.archlinux.org/">AUR</a> written in Rust that
              were
              memory safe, sure, but needed to be manually killed because they
              were stuck in a loop and running a train on one of my core.
            </li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</div>

<div>
  <p>
    So back to reality, Rust is not the worst, and I have my complaints about Go
    as well. I guess it just bugs me how Rust
    pitches itself as a cure all. Maybe I need to maintain a more open mindset
    <sup><a href="#ref3">3</a></sup>. let's be real, if my employer came to me
    and said "Hey, we want this written in Rust," If it seemed like the
    appropriate language, I'd just write on board.
  </p>
</div>

<p class="mt-5 text-muted font-monospace" id="deep-thought">
  <small>
    <sup>1</sup>
    Like, why do hot dogs come in packages of 8, but buns come in
    packages of 10?
  </small>
</p>
<p class="text-muted font-monospace" id="ref2">
  <small>
    <sup>2</sup>
    See <a
      href="https://www.reddit.com/r/rust/comments/biq864/giving_up_on_wlrootsrs/">the
      article discussed</a> in the Rust Sub-Reddit as an example.
  </small>
</p>
<p class="text-muted font-monospace" id="ref3">
  <small>
    <sup>3</sup>
    I remember when someone first introduced me to Python, and I thought, "Nah!
    who needs that low performance junk!?" Now I use it every day, and of
    course, love it.
  </small>
</p>
